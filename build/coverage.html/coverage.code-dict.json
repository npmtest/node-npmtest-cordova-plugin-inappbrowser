{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_inappbrowser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/lib.npmtest_cordova_plugin_inappbrowser.js":"/* istanbul instrument in package npmtest_cordova_plugin_inappbrowser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_inappbrowser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_inappbrowser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-inappbrowser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_inappbrowser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_inappbrowser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_inappbrowser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_inappbrowser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_inappbrowser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_inappbrowser.__dirname + '/lib.npmtest_cordova_plugin_inappbrowser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/www/inappbrowser.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n(function() {\n    // special patch to correctly work on Ripple emulator (CB-9760)\n    if (window.parent && !!window.parent.ripple) { // https://gist.github.com/triceam/4658021\n        module.exports = window.open.bind(window); // fallback to default window.open behaviour\n        return;\n    }\n\n    var exec = require('cordova/exec');\n    var channel = require('cordova/channel');\n    var modulemapper = require('cordova/modulemapper');\n    var urlutil = require('cordova/urlutil');\n\n    function InAppBrowser() {\n       this.channels = {\n            'loadstart': channel.create('loadstart'),\n            'loadstop' : channel.create('loadstop'),\n            'loaderror' : channel.create('loaderror'),\n            'exit' : channel.create('exit')\n       };\n    }\n\n    InAppBrowser.prototype = {\n        _eventHandler: function (event) {\n            if (event && (event.type in this.channels)) {\n                this.channels[event.type].fire(event);\n            }\n        },\n        close: function (eventname) {\n            exec(null, null, \"InAppBrowser\", \"close\", []);\n        },\n        show: function (eventname) {\n            exec(null, null, \"InAppBrowser\", \"show\", []);\n        },\n        hide: function (eventname) {\n            exec(null, null, \"InAppBrowser\", \"hide\", []);\n        },\n        addEventListener: function (eventname,f) {\n            if (eventname in this.channels) {\n                this.channels[eventname].subscribe(f);\n            }\n        },\n        removeEventListener: function(eventname, f) {\n            if (eventname in this.channels) {\n                this.channels[eventname].unsubscribe(f);\n            }\n        },\n\n        executeScript: function(injectDetails, cb) {\n            if (injectDetails.code) {\n                exec(cb, null, \"InAppBrowser\", \"injectScriptCode\", [injectDetails.code, !!cb]);\n            } else if (injectDetails.file) {\n                exec(cb, null, \"InAppBrowser\", \"injectScriptFile\", [injectDetails.file, !!cb]);\n            } else {\n                throw new Error('executeScript requires exactly one of code or file to be specified');\n            }\n        },\n\n        insertCSS: function(injectDetails, cb) {\n            if (injectDetails.code) {\n                exec(cb, null, \"InAppBrowser\", \"injectStyleCode\", [injectDetails.code, !!cb]);\n            } else if (injectDetails.file) {\n                exec(cb, null, \"InAppBrowser\", \"injectStyleFile\", [injectDetails.file, !!cb]);\n            } else {\n                throw new Error('insertCSS requires exactly one of code or file to be specified');\n            }\n        }\n    };\n\n    module.exports = function(strUrl, strWindowName, strWindowFeatures, callbacks) {\n        // Don't catch calls that write to existing frames (e.g. named iframes).\n        if (window.frames && window.frames[strWindowName]) {\n            var origOpenFunc = modulemapper.getOriginalSymbol(window, 'open');\n            return origOpenFunc.apply(window, arguments);\n        }\n\n        strUrl = urlutil.makeAbsolute(strUrl);\n        var iab = new InAppBrowser();\n\n        callbacks = callbacks || {};\n        for (var callbackName in callbacks) {\n            iab.addEventListener(callbackName, callbacks[callbackName]);\n        }\n\n        var cb = function(eventname) {\n           iab._eventHandler(eventname);\n        };\n\n        strWindowFeatures = strWindowFeatures || \"\";\n\n        exec(cb, cb, \"InAppBrowser\", \"open\", [strUrl, strWindowName, strWindowFeatures]);\n        return iab;\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/src/browser/InAppBrowserProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar modulemapper = require('cordova/modulemapper');\n\nvar browserWrap,\n    popup,\n    navigationButtonsDiv,\n    navigationButtonsDivInner,\n    backButton,\n    forwardButton,\n    closeButton;\n\nfunction attachNavigationEvents(element, callback) {\n    var onError = function () {\n        callback({ type: \"loaderror\", url: this.contentWindow.location}, {keepCallback: true});\n    };\n\n    element.addEventListener(\"pageshow\", function () {\n        callback({ type: \"loadstart\", url: this.contentWindow.location}, {keepCallback: true});\n    });\n\n    element.addEventListener(\"load\", function () {\n        callback({ type: \"loadstop\", url: this.contentWindow.location}, {keepCallback: true});\n    });\n\n    element.addEventListener(\"error\", onError);\n    element.addEventListener(\"abort\", onError);\n}\n\nvar IAB = {\n    close: function (win, lose) {\n        if (browserWrap) {\n            if (win) win({ type: \"exit\" });\n\n            browserWrap.parentNode.removeChild(browserWrap);\n            browserWrap = null;\n            popup = null;\n        }\n    },\n\n    show: function (win, lose) {\n        if (browserWrap) {\n            browserWrap.style.display = \"block\";\n        }\n    },\n\n    open: function (win, lose, args) {\n        var strUrl = args[0],\n            target = args[1],\n            features = args[2];\n\n        if (target === \"_self\" || !target) {\n            window.location = strUrl;\n        } else if (target === \"_system\") {\n            modulemapper.getOriginalSymbol(window, 'window.open').call(window, strUrl, \"_blank\");\n        } else {\n            // \"_blank\" or anything else\n            if (!browserWrap) {\n                browserWrap = document.createElement(\"div\");\n                browserWrap.style.position = \"absolute\";\n                browserWrap.style.top = \"0\";\n                browserWrap.style.left = \"0\";\n                browserWrap.style.boxSizing = \"border-box\";\n                browserWrap.style.borderWidth = \"40px\";\n                browserWrap.style.width = \"100vw\";\n                browserWrap.style.height = \"100vh\";\n                browserWrap.style.borderStyle = \"solid\";\n                browserWrap.style.borderColor = \"rgba(0,0,0,0.25)\";\n\n                browserWrap.onclick = function () {\n                    setTimeout(function () {\n                        IAB.close(win);\n                    }, 0);\n                };\n\n                document.body.appendChild(browserWrap);\n            }\n\n            if (features.indexOf(\"hidden=yes\") !== -1) {\n                browserWrap.style.display = \"none\";\n            }\n\n            popup = document.createElement(\"iframe\");\n            popup.style.borderWidth = \"0px\";\n            popup.style.width = \"100%\";\n\n            browserWrap.appendChild(popup);\n\n            if (features.indexOf(\"location=yes\") !== -1 || features.indexOf(\"location\") === -1) {\n                popup.style.height = \"calc(100% - 60px)\";\n                popup.style.marginBottom = \"-4px\";\n\n                navigationButtonsDiv = document.createElement(\"div\");\n                navigationButtonsDiv.style.height = \"60px\";\n                navigationButtonsDiv.style.backgroundColor = \"#404040\";\n                navigationButtonsDiv.style.zIndex = \"999\";\n                navigationButtonsDiv.onclick = function (e) {\n                    e.cancelBubble = true;\n                };\n\n                navigationButtonsDivInner = document.createElement(\"div\");\n                navigationButtonsDivInner.style.paddingTop = \"10px\";\n                navigationButtonsDivInner.style.height = \"50px\";\n                navigationButtonsDivInner.style.width = \"160px\";\n                navigationButtonsDivInner.style.margin = \"0 auto\";\n                navigationButtonsDivInner.style.backgroundColor = \"#404040\";\n                navigationButtonsDivInner.style.zIndex = \"999\";\n                navigationButtonsDivInner.onclick = function (e) {\n                    e.cancelBubble = true;\n                };\n\n\n                backButton = document.createElement(\"button\");\n                backButton.style.width = \"40px\";\n                backButton.style.height = \"40px\";\n                backButton.style.borderRadius = \"40px\";\n\n                backButton.innerHTML = \"←\";\n                backButton.addEventListener(\"click\", function (e) {\n                    if (popup.canGoBack)\n                        popup.goBack();\n                });\n\n                forwardButton = document.createElement(\"button\");\n                forwardButton.style.marginLeft = \"20px\";\n                forwardButton.style.width = \"40px\";\n                forwardButton.style.height = \"40px\";\n                forwardButton.style.borderRadius = \"40px\";\n\n                forwardButton.innerHTML = \"→\";\n                forwardButton.addEventListener(\"click\", function (e) {\n                    if (popup.canGoForward)\n                        popup.goForward();\n                });\n\n                closeButton = document.createElement(\"button\");\n                closeButton.style.marginLeft = \"20px\";\n                closeButton.style.width = \"40px\";\n                closeButton.style.height = \"40px\";\n                closeButton.style.borderRadius = \"40px\";\n\n                closeButton.innerHTML = \"✖\";\n                closeButton.addEventListener(\"click\", function (e) {\n                    setTimeout(function () {\n                        IAB.close(win);\n                    }, 0);\n                });\n\n                // iframe navigation is not yet supported\n                backButton.disabled = true;\n                forwardButton.disabled = true;\n\n                navigationButtonsDivInner.appendChild(backButton);\n                navigationButtonsDivInner.appendChild(forwardButton);\n                navigationButtonsDivInner.appendChild(closeButton);\n                navigationButtonsDiv.appendChild(navigationButtonsDivInner);\n\n                browserWrap.appendChild(navigationButtonsDiv);\n            } else {\n                popup.style.height = \"100%\";\n            }\n\n            // start listening for navigation events\n            attachNavigationEvents(popup, win);\n\n            popup.src = strUrl;\n        }\n    },\n\n    injectScriptCode: function (win, fail, args) {\n        var code = args[0],\n            hasCallback = args[1];\n\n        if (browserWrap && popup) {\n            try {\n                popup.contentWindow.eval(code);\n                if (hasCallback) {\n                    win([]);\n                }\n            } catch(e) {\n                console.error('Error occured while trying to injectScriptCode: ' + JSON.stringify(e));\n            }\n        }\n    },\n\n    injectScriptFile: function (win, fail, args) {\n        var msg = 'Browser cordova-plugin-inappbrowser injectScriptFile is not yet implemented';\n        console.warn(msg);\n        if (fail) {\n            fail(msg);\n        }\n    }, \n\n    injectStyleCode: function (win, fail, args) {\n        var msg = 'Browser cordova-plugin-inappbrowser injectStyleCode is not yet implemented';\n        console.warn(msg);\n        if (fail) {\n            fail(msg);\n        }\n    },\n\n    injectStyleFile: function (win, fail, args) {\n        var msg = 'Browser cordova-plugin-inappbrowser injectStyleFile is not yet implemented';\n        console.warn(msg);\n        if (fail) {\n            fail(msg);\n        }\n    }\n};\n\nmodule.exports = IAB;\n\nrequire(\"cordova/exec/proxy\").add(\"InAppBrowser\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/src/firefoxos/InAppBrowserProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n// https://developer.mozilla.org/en-US/docs/WebAPI/Browser\n\nvar modulemapper = require('cordova/modulemapper');\n\nvar origOpenFunc = modulemapper.getOriginalSymbol(window, 'window.open');\nvar browserWrap;\n\nvar IABExecs = {\n\n    close: function (win, lose) {\n        if (browserWrap) {\n            browserWrap.parentNode.removeChild(browserWrap);\n            browserWrap = null;\n            if (typeof(win) == \"function\") win({type:'exit'});\n        }\n    },\n\n    /*\n     * Reveal browser if opened hidden\n     */\n    show: function (win, lose) {\n        console.error('[FirefoxOS] show not implemented');\n    },\n\n    hide: function (win, lose) {\n        console.error('[FirefoxOS] hide not implemented');\n    },\n\n    open: function (win, lose, args) {\n        var strUrl = args[0],\n            target = args[1],\n            features_string = args[2] || \"location=yes\", //location=yes is default\n            features = {};\n\n        var features_list = features_string.split(',');\n        features_list.forEach(function(feature) {\n            var tup = feature.split('=');\n            if (tup[1] == 'yes') {\n                tup[1] = true;\n            } else if (tup[1] == 'no') {\n                tup[1] = false;\n            } else {\n                var number = parseInt(tup[1]);\n                if (!isNaN(number)) {\n                    tup[1] = number;\n                }\n            }\n            features[tup[0]] = tup[1];\n        });\n\n        function updateIframeSizeNoLocation() {\n            browserWrap.style.width = window.innerWidth + 'px';\n            browserWrap.style.height = window.innerHeight + 'px';\n            browserWrap.style.zIndex = '999999999';\n            browserWrap.browser.style.height = (window.innerHeight - 60) + 'px';\n            browserWrap.browser.style.width = browserWrap.style.width;\n        }\n\n        if (target === '_system') {\n            origOpenFunc.apply(window, [strUrl, '_blank']);\n        } else if (target === '_blank') {\n            var browserElem = document.createElement('iframe');\n            browserElem.setAttribute('mozbrowser', true);\n            // make this loaded in its own child process\n            browserElem.setAttribute('remote', true);\n            browserElem.setAttribute('src', strUrl);\n            if (browserWrap) {\n                document.body.removeChild(browserWrap);\n            }\n            browserWrap = document.createElement('div');\n            // assign browser element to browserWrap for future reference\n            browserWrap.browser = browserElem;\n\n            browserWrap.classList.add('inAppBrowserWrap');\n            // position fixed so that it works even when page is scrolled\n            browserWrap.style.position = 'fixed';\n            browserElem.style.position = 'absolute';\n            browserElem.style.border = 0;\n            browserElem.style.top = '60px';\n            browserElem.style.left = '0px';\n            updateIframeSizeNoLocation();\n\n            var menu = document.createElement('menu');\n            menu.setAttribute('type', 'toolbar');\n            var close = document.createElement('li');\n            var back = document.createElement('li');\n            var forward = document.createElement('li');\n\n            close.appendChild(document.createTextNode('×'));\n            back.appendChild(document.createTextNode('<'));\n            forward.appendChild(document.createTextNode('>'));\n\n            close.classList.add('inAppBrowserClose');\n            back.classList.add('inAppBrowserBack');\n            forward.classList.add('inAppBrowserForward');\n\n            var checkForwardBackward = function () {\n                var backReq = browserElem.getCanGoBack();\n                backReq.onsuccess = function() {\n                    if (this.result) {\n                        back.classList.remove('disabled');\n                    } else {\n                        back.classList.add('disabled');\n                    }\n                };\n                var forwardReq = browserElem.getCanGoForward();\n                forwardReq.onsuccess = function() {\n                    if (this.result) {\n                        forward.classList.remove('disabled');\n                    } else {\n                        forward.classList.add('disabled');\n                    }\n                };\n            };\n\n            browserElem.addEventListener('mozbrowserloadend', checkForwardBackward);\n\n            close.addEventListener('click', function () {\n                setTimeout(function () {\n                    IABExecs.close(win, lose);\n                }, 0);\n            }, false);\n\n            back.addEventListener('click', function () {\n                browserElem.goBack();\n            }, false);\n\n            forward.addEventListener('click', function () {\n                browserElem.goForward();\n            }, false);\n\n            menu.appendChild(back);\n            menu.appendChild(forward);\n            menu.appendChild(close);\n\n            browserWrap.appendChild(menu);\n            browserWrap.appendChild(browserElem);\n            document.body.appendChild(browserWrap);\n\n            //we use mozbrowserlocationchange instead of mozbrowserloadstart to get the url\n            browserElem.addEventListener('mozbrowserlocationchange', function(e){\n                win({\n                    type:'loadstart',\n                    url : e.detail\n                });\n            }, false);\n            browserElem.addEventListener('mozbrowserloadend', function(e){\n                win({type:'loadstop'});\n            }, false);\n            browserElem.addEventListener('mozbrowsererror', function(e){\n                win({type:'loaderror'});\n            }, false);\n            browserElem.addEventListener('mozbrowserclose', function(e){\n                win({type:'exit'});\n            }, false);\n        } else {\n            window.location = strUrl;\n        }\n    },\n    injectScriptCode: function (code, bCB) {\n        console.error('[FirefoxOS] injectScriptCode not implemented');\n    },\n    injectScriptFile: function (file, bCB) {\n        console.error('[FirefoxOS] injectScriptFile not implemented');\n    }\n};\n\nmodule.exports = IABExecs;\n\nrequire('cordova/exec/proxy').add('InAppBrowser', module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/src/ubuntu/InAppBrowser_escapeScript.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* jshint -W061 */\n/* global oxide */\n\noxide.addMessageHandler(\"EXECUTE\", function(msg) {\n    var code = msg.args.code;\n    try {\n        msg.reply({result: eval(code)});\n    } catch(e) {\n        msg.error(\"Code threw exception: \\\"\" + e + \"\\\"\");\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/src/windows/InAppBrowserProxy.js":"﻿/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* jslint sloppy:true */\n/* global Windows:true, setImmediate */\n\nvar cordova = require('cordova'),\n    urlutil = require('cordova/urlutil');\n\nvar browserWrap,\n    popup,\n    navigationButtonsDiv,\n    navigationButtonsDivInner,\n    backButton,\n    forwardButton,\n    closeButton,\n    bodyOverflowStyle,\n    navigationEventsCallback,\n    hardwareBackCallback;\n\n// x-ms-webview is available starting from Windows 8.1 (platformId is 'windows')\n// http://msdn.microsoft.com/en-us/library/windows/apps/dn301831.aspx\nvar isWebViewAvailable = cordova.platformId === 'windows';\n\nfunction attachNavigationEvents(element, callback) {\n    if (isWebViewAvailable) {\n        element.addEventListener(\"MSWebViewNavigationStarting\", function (e) {\n            callback({ type: \"loadstart\", url: e.uri}, {keepCallback: true} );\n        });\n\n        element.addEventListener(\"MSWebViewNavigationCompleted\", function (e) {\n            if (e.isSuccess) {\n                callback({ type: \"loadstop\", url: e.uri }, { keepCallback: true });\n            } else {\n                callback({ type: \"loaderror\", url: e.uri, code: e.webErrorStatus, message: \"Navigation failed with error code \" + e.webErrorStatus}, { keepCallback: true });\n            }\n        });\n\n        element.addEventListener(\"MSWebViewUnviewableContentIdentified\", function (e) {\n            // WebView found the content to be not HTML.\n            // http://msdn.microsoft.com/en-us/library/windows/apps/dn609716.aspx\n            callback({ type: \"loaderror\", url: e.uri, code: e.webErrorStatus, message: \"Navigation failed with error code \" + e.webErrorStatus}, { keepCallback: true });\n        });\n\n        element.addEventListener(\"MSWebViewContentLoading\", function (e) {\n            if (navigationButtonsDiv && popup) {\n                if (popup.canGoBack) {\n                    backButton.removeAttribute(\"disabled\");\n                } else {\n                    backButton.setAttribute(\"disabled\", \"true\");\n                }\n\n                if (popup.canGoForward) {\n                    forwardButton.removeAttribute(\"disabled\");\n                } else {\n                    forwardButton.setAttribute(\"disabled\", \"true\");\n                }\n            }\n        });\n    } else {\n        var onError = function () {\n            callback({ type: \"loaderror\", url: this.contentWindow.location}, {keepCallback: true});\n        };\n\n        element.addEventListener(\"unload\", function () {\n            callback({ type: \"loadstart\", url: this.contentWindow.location}, {keepCallback: true});\n        });\n\n        element.addEventListener(\"load\", function () {\n            callback({ type: \"loadstop\", url: this.contentWindow.location}, {keepCallback: true});\n        });\n\n        element.addEventListener(\"error\", onError);\n        element.addEventListener(\"abort\", onError);\n    }\n}\n\nvar IAB = {\n    close: function (win, lose) {\n        setImmediate(function () {\n            if (browserWrap) {\n                if (navigationEventsCallback) {\n                    navigationEventsCallback({ type: \"exit\" });\n                }\n\n                browserWrap.parentNode.removeChild(browserWrap);\n                // Reset body overflow style to initial value\n                document.body.style.msOverflowStyle = bodyOverflowStyle;\n                browserWrap = null;\n                popup = null;\n\n                document.removeEventListener(\"backbutton\", hardwareBackCallback, false);\n            }\n        });\n    },\n    show: function (win, lose) {\n        setImmediate(function () {\n            if (browserWrap) {\n                browserWrap.style.display = \"block\";\n            }\n        });\n    },\n    hide: function (win, lose) {\n        if (browserWrap) {\n            browserWrap.style.display = \"none\";\n        }\n    },\n    open: function (win, lose, args) {\n        // make function async so that we can add navigation events handlers before view is loaded and navigation occured\n        setImmediate(function () {\n            var strUrl = args[0],\n                target = args[1],\n                features = args[2],\n                url;\n\n            navigationEventsCallback = win;\n\n            if (target === \"_system\") {\n                url = new Windows.Foundation.Uri(strUrl);\n                Windows.System.Launcher.launchUriAsync(url);\n            } else if (target === \"_self\" || !target) {\n                window.location = strUrl;\n            } else {\n                // \"_blank\" or anything else\n                if (!browserWrap) {\n                    var browserWrapStyle = document.createElement('link');\n                    browserWrapStyle.rel = \"stylesheet\";\n                    browserWrapStyle.type = \"text/css\";\n                    browserWrapStyle.href = urlutil.makeAbsolute(\"/www/css/inappbrowser.css\");\n\n                    document.head.appendChild(browserWrapStyle);\n\n                    browserWrap = document.createElement(\"div\");\n                    browserWrap.className = \"inAppBrowserWrap\";\n\n                    if (features.indexOf(\"fullscreen=yes\") > -1) {\n                        browserWrap.classList.add(\"inAppBrowserWrapFullscreen\");\n                    }\n\n                    // Save body overflow style to be able to reset it back later\n                    bodyOverflowStyle = document.body.style.msOverflowStyle;\n\n                    browserWrap.onclick = function () {\n                        setTimeout(function () {\n                            IAB.close(navigationEventsCallback);\n                        }, 0);\n                    };\n\n                    document.body.appendChild(browserWrap);\n                    // Hide scrollbars for the whole body while inappbrowser's window is open\n                    document.body.style.msOverflowStyle = \"none\";\n                }\n\n                if (features.indexOf(\"hidden=yes\") !== -1) {\n                    browserWrap.style.display = \"none\";\n                }\n\n                popup = document.createElement(isWebViewAvailable ? \"x-ms-webview\" : \"iframe\");\n                if (popup instanceof HTMLIFrameElement) {\n                    // For iframe we need to override bacground color of parent element here\n                    // otherwise pages without background color set will have transparent background\n                    popup.style.backgroundColor = \"white\";\n                }\n                popup.style.borderWidth = \"0px\";\n                popup.style.width = \"100%\";\n                popup.style.marginBottom = \"-5px\";\n\n                browserWrap.appendChild(popup);\n\n                var closeHandler = function (e) {\n                    setTimeout(function () {\n                        IAB.close(navigationEventsCallback);\n                    }, 0);\n                };\n\n                if (features.indexOf(\"hardwareback=yes\") > -1 || features.indexOf(\"hardwareback\") === -1) {\n                    hardwareBackCallback = function () {\n                        if (browserWrap.style.display === 'none') {\n                            // NOTE: backbutton handlers have to throw an exception in order to prevent\n                            // returning 'true' inside cordova-js, which would mean that the event is handled by user.\n                            // Throwing an exception means that the default/system navigation behavior will take place,\n                            // which is to exit the app if the navigation stack is empty.\n                            throw 'Exit the app';\n                        }\n\n                        if (popup.canGoBack) {\n                            popup.goBack();\n                        } else {\n                            closeHandler();\n                        }\n                    };\n                } else if (features.indexOf(\"hardwareback=no\") > -1) {\n                    hardwareBackCallback = function () {\n                        if (browserWrap.style.display === 'none') {\n                            // See comment above\n                            throw 'Exit the app';\n                        }\n\n                        closeHandler();\n                    };\n                }\n\n                document.addEventListener(\"backbutton\", hardwareBackCallback, false);\n\n                if (features.indexOf(\"location=yes\") !== -1 || features.indexOf(\"location\") === -1) {\n                    popup.style.height = \"calc(100% - 70px)\";\n\n                    navigationButtonsDiv = document.createElement(\"div\");\n                    navigationButtonsDiv.className = \"inappbrowser-app-bar\";\n                    navigationButtonsDiv.onclick = function (e) {\n                        e.cancelBubble = true;\n                    };\n\n                    navigationButtonsDivInner = document.createElement(\"div\");\n                    navigationButtonsDivInner.className = \"inappbrowser-app-bar-inner\";\n                    navigationButtonsDivInner.onclick = function (e) {\n                        e.cancelBubble = true;\n                    };\n\n                    backButton = document.createElement(\"div\");\n                    backButton.innerText = \"back\";\n                    backButton.className = \"app-bar-action action-back\";\n                    backButton.addEventListener(\"click\", function (e) {\n                        if (popup.canGoBack)\n                            popup.goBack();\n                    });\n\n                    forwardButton = document.createElement(\"div\");\n                    forwardButton.innerText = \"forward\";\n                    forwardButton.className = \"app-bar-action action-forward\";\n                    forwardButton.addEventListener(\"click\", function (e) {\n                        if (popup.canGoForward)\n                            popup.goForward();\n                    });\n\n                    closeButton = document.createElement(\"div\");\n                    closeButton.innerText = \"close\";\n                    closeButton.className = \"app-bar-action action-close\";\n                    closeButton.addEventListener(\"click\", closeHandler);\n\n                    if (!isWebViewAvailable) {\n                        // iframe navigation is not yet supported\n                        backButton.setAttribute(\"disabled\", \"true\");\n                        forwardButton.setAttribute(\"disabled\", \"true\");\n                    }\n\n                    navigationButtonsDivInner.appendChild(backButton);\n                    navigationButtonsDivInner.appendChild(forwardButton);\n                    navigationButtonsDivInner.appendChild(closeButton);\n                    navigationButtonsDiv.appendChild(navigationButtonsDivInner);\n\n                    browserWrap.appendChild(navigationButtonsDiv);\n                } else {\n                    popup.style.height = \"100%\";\n                }\n\n                // start listening for navigation events\n                attachNavigationEvents(popup, navigationEventsCallback);\n\n                if (isWebViewAvailable) {\n                    strUrl = strUrl.replace(\"ms-appx://\", \"ms-appx-web://\");\n                }\n                popup.src = strUrl;\n            }\n        });\n    },\n\n    injectScriptCode: function (win, fail, args) {\n        setImmediate(function () {\n            var code = args[0],\n                hasCallback = args[1];\n\n            if (isWebViewAvailable && browserWrap && popup) {\n                var op = popup.invokeScriptAsync(\"eval\", code);\n                op.oncomplete = function (e) {\n                    if (hasCallback) {\n                        // return null if event target is unavailable by some reason\n                        var result = (e && e.target) ? [e.target.result] : [null];\n                        win(result);\n                    }\n                };\n                op.onerror = function () { };\n                op.start();\n            }\n        });\n    },\n\n    injectScriptFile: function (win, fail, args) {\n        setImmediate(function () {\n            var filePath = args[0],\n                hasCallback = args[1];\n\n            if (!!filePath) {\n                filePath = urlutil.makeAbsolute(filePath);\n            }\n\n            if (isWebViewAvailable && browserWrap && popup) {\n                // CB-12364 getFileFromApplicationUriAsync does not support ms-appx-web\n                var uri = new Windows.Foundation.Uri(filePath.replace('ms-appx-web:', 'ms-appx:'));\n                Windows.Storage.StorageFile.getFileFromApplicationUriAsync(uri).done(function (file) {\n                    Windows.Storage.FileIO.readTextAsync(file).done(function (code) {\n                        var op = popup.invokeScriptAsync(\"eval\", code);\n                        op.oncomplete = function(e) {\n                            if (hasCallback) {\n                                var result = [e.target.result];\n                                win(result);\n                            }\n                        };\n                        op.onerror = function () { };\n                        op.start();\n                    });\n                });\n            }\n        });\n    },\n\n    injectStyleCode: function (win, fail, args) {\n        setImmediate(function () {\n            var code = args[0],\n                hasCallback = args[1];\n\n            if (isWebViewAvailable && browserWrap && popup) {\n                injectCSS(popup, code, hasCallback && win);\n            }\n        });\n    },\n\n    injectStyleFile: function (win, fail, args) {\n        setImmediate(function () {\n            var filePath = args[0],\n                hasCallback = args[1];\n\n            filePath = filePath && urlutil.makeAbsolute(filePath);\n\n            if (isWebViewAvailable && browserWrap && popup) {\n                // CB-12364 getFileFromApplicationUriAsync does not support ms-appx-web\n                var uri = new Windows.Foundation.Uri(filePath.replace('ms-appx-web:', 'ms-appx:'));\n                Windows.Storage.StorageFile.getFileFromApplicationUriAsync(uri).then(function (file) {\n                    return Windows.Storage.FileIO.readTextAsync(file);\n                }).done(function (code) {\n                    injectCSS(popup, code, hasCallback && win);\n                }, function () {\n                    // no-op, just catch an error\n                });\n            }\n        });\n    }\n};\n\nfunction injectCSS (webView, cssCode, callback) {\n    // This will automatically escape all thing that we need (quotes, slashes, etc.)\n    var escapedCode = JSON.stringify(cssCode);\n    var evalWrapper = \"(function(d){var c=d.createElement('style');c.innerHTML=%s;d.head.appendChild(c);})(document)\"\n        .replace('%s', escapedCode);\n\n    var op = webView.invokeScriptAsync(\"eval\", evalWrapper);\n    op.oncomplete = function() {\n        if (callback) {\n            callback([]);\n        }\n    };\n    op.onerror = function () { };\n    op.start();\n}\n\nmodule.exports = IAB;\n\nrequire(\"cordova/exec/proxy\").add(\"InAppBrowser\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-inappbrowser/node_modules/cordova-plugin-inappbrowser/www/windows8/InAppBrowserProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n/*jslint sloppy:true */\n/*global Windows:true, require, document, setTimeout, window, module */\n\nvar browserWrap;\n\nvar IAB = {\n\n    close: function (win, lose) {\n        if (browserWrap) {\n            browserWrap.parentNode.removeChild(browserWrap);\n            browserWrap = null;\n        }\n    },\n    show: function (win, lose) {\n        /* empty block, ran out of bacon?\n         if (browserWrap) {\n\n         }*/\n    },\n    hide: function (win, lose) {\n        /* empty block, ran out of bacon?\n        if (browserWrap) {\n\n        }*/\n    },\n    open: function (win, lose, args) {\n        var strUrl = args[0],\n            target = args[1],\n            url,\n            elem;\n\n        if (target === \"_system\") {\n            url = new Windows.Foundation.Uri(strUrl);\n            Windows.System.Launcher.launchUriAsync(url);\n        } else if (target === \"_blank\") {\n            if (!browserWrap) {\n                browserWrap = document.createElement(\"div\");\n                browserWrap.style.position = \"absolute\";\n                browserWrap.style.width = (window.innerWidth - 80) + \"px\";\n                browserWrap.style.height = (window.innerHeight - 80) + \"px\";\n                browserWrap.style.borderWidth = \"40px\";\n                browserWrap.style.borderStyle = \"solid\";\n                browserWrap.style.borderColor = \"rgba(0,0,0,0.25)\";\n                browserWrap.style.zIndex = \"9999999\";\n\n                browserWrap.onclick = function () {\n                    setTimeout(function () {\n                        IAB.close();\n                    }, 0);\n                };\n\n                document.body.appendChild(browserWrap);\n            }\n            var localFile = (strUrl.indexOf('ms-appdata:///') > -1);\n            if (localFile) {\n                elem = document.createElement(\"x-ms-webview\");\n                elem.style.width = (window.innerWidth - 80) + \"px\";\n                elem.style.height = (window.innerHeight - 80) + \"px\";\n                elem.style.borderWidth = \"0px\";\n                elem.name = \"targetFrame\";\n                elem.src = strUrl;\n\n                window.addEventListener(\"resize\", function () {\n                    if (browserWrap && elem) {\n                        elem.style.width = (window.innerWidth - 80) + \"px\";\n                        elem.style.height = (window.innerHeight - 80) + \"px\";\n                    }\n                });\n\n            } else {\n                elem = document.createElement(\"iframe\");\n                elem.style.width = (window.innerWidth - 80) + \"px\";\n                elem.style.height = (window.innerHeight - 80) + \"px\";\n                elem.style.borderWidth = \"0px\";\n                elem.name = \"targetFrame\";\n                elem.src = strUrl;\n\n\n                window.addEventListener(\"resize\", function () {\n                    if (browserWrap && elem) {\n                        elem.style.width = (window.innerWidth - 80) + \"px\";\n                        elem.style.height = (window.innerHeight - 80) + \"px\";\n                    }\n                });\n            }\n\n            browserWrap.appendChild(elem);\n        } else {\n            window.location = strUrl;\n        }\n\n        //var object = new WinJS.UI.HtmlControl(elem, { uri: strUrl });\n\n    },\n\n    injectScriptCode: function (code, bCB) {\n\n        // \"(function(d) { var c = d.createElement('script'); c.src = %@; d.body.appendChild(c); })(document)\"\n    },\n\n    injectScriptFile: function (file, bCB) {\n\n    }\n};\n\nmodule.exports = IAB;\n\n\nrequire(\"cordova/exec/proxy\").add(\"InAppBrowser\", module.exports);\n"}